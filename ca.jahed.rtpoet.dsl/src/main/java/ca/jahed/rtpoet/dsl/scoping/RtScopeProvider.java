/*
 * generated by Xtext 2.25.0
 */
package ca.jahed.rtpoet.dsl.scoping;


import ca.jahed.rtpoet.dsl.rt.*;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.FilteringScope;

import java.util.*;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class RtScopeProvider extends AbstractDeclarativeScopeProvider {

    @Override
    public IScope getScope(EObject context, EReference reference) {

        if (context instanceof Part
                && reference == RtPackage.Literals.PART__TYPE) {
            Capsule capsule = EcoreUtil2.getContainerOfType(context, Capsule.class);
            return new FilteringScope(delegateGetScope(context, reference),
                    input -> !input.getEObjectOrProxy().equals(capsule));
        }

        if (context instanceof Connector
                && (reference == RtPackage.Literals.CONNECTOR__PART1
                || reference == RtPackage.Literals.CONNECTOR__PART2 )) {
            Capsule capsule = EcoreUtil2.getContainerOfType(context, Capsule.class);
            return Scopes.scopeFor(capsule.getParts());
        }

        if (context instanceof Connector
                && reference == RtPackage.Literals.CONNECTOR__PORT1) {
            Part part = ((Connector)context).getPart1();
            return Scopes.scopeFor(getPortsForPart(context, part));
        }

        if (context instanceof Connector
                && reference == RtPackage.Literals.CONNECTOR__PORT2) {
            Part part = ((Connector)context).getPart2();
            return Scopes.scopeFor(getPortsForPart(context, part));
        }

        if (context instanceof Transition
                && (reference == RtPackage.Literals.TRANSITION__SOURCE
                || reference == RtPackage.Literals.TRANSITION__TARGET)) {
            EObject parent = context.eContainer();
            List<State> candidates = EcoreUtil2.getAllContentsOfType(parent, State.class);
            return Scopes.scopeFor(candidates);
        }

        if (context instanceof Trigger
                && reference == RtPackage.Literals.TRIGGER__PORTS) {
            Capsule capsule = EcoreUtil2.getContainerOfType(context, Capsule.class);
            return Scopes.scopeFor(capsule.getPorts());
        }

        if (context instanceof Trigger
                && reference == RtPackage.Literals.TRIGGER__SIGNAL) {
            Trigger trigger = (Trigger) context;
            Port firstPort = trigger.getPorts().get(0);
            List<Signal> candidates = firstPort.getType().getSignals();
            return Scopes.scopeFor(candidates);
        }

        return delegateGetScope(context, reference);
    }

    private List<Port> getPortsForPart(EObject context, Part part) {
        Capsule capsule = EcoreUtil2.getContainerOfType(context, Capsule.class);

        List<Port> candidates;
        if( part == null) candidates = capsule.getPorts();
        else candidates = part.getType().getPorts();
        return candidates;
    }
}
